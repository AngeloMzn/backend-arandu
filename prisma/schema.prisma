generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  name        String?
  role        String        @default("user")
  password    String
  CPF         String        @unique @default("000.000.000-00")
  phoneNumber String        @default("00000000000")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  editions    UserEdition[]
  isActive    Boolean?      @default(true)
  orientador  Orientador?
  avaliador   Avaliador?
  organizador Organizador[]
}

model Edition {
  id                     Int                      @id @default(autoincrement())
  name                   String
  year                   Int
  registrationStart      DateTime
  registrationEnd        DateTime
  fixesStart             DateTime
  fixesEnd               DateTime
  onlineEvaluationStart  DateTime
  onlineEvaluationEnd    DateTime
  liveEvaluationStart    DateTime
  liveEvaluationEnd      DateTime
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  EditionWeight          EditionWeight[]
  EditionEvaluationCount EditionEvaluationCount[]
  users                  UserEdition[]
}

model EditionWeight {
  id                             Int      @id @default(autoincrement())
  edition                        Edition  @relation(fields: [editionId], references: [id])
  liveComitteeEvaluationWeight   Int
  liveCommomEvaluationWeight     Int
  onlineComitteeEvaluationWeight Int
  onlineCommomEvaluationWeight   Int
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
  editionId                      Int      @unique
}

model EditionEvaluationCount {
  id                              Int      @id @default(autoincrement())
  minimumOnlineComitteeEvaluation Int
  minimumOnlineCommomEvaluation   Int
  minimumLiveComitteeEvaluation   Int
  minimumLiveCommomEvaluation     Int
  maximumOnlineComitteeEvaluation Int
  maximumOnlineCommomEvaluation   Int
  maximumLiveComitteeEvaluation   Int
  maximumLiveCommomEvaluation     Int
  editionId                       Int      @unique
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt

  edition Edition @relation(fields: [editionId], references: [id])
}

model UserEdition {
  id        Int    @id @default(autoincrement())
  userId    Int
  editionId Int
  role      String

  user    User    @relation(fields: [userId], references: [id])
  edition Edition @relation(fields: [editionId], references: [id])

  @@unique([userId, editionId])
}

model Address {
  id           Int     @id @default(autoincrement())
  orientadorId Int?    @unique
  avaliadorId  Int?    @unique
  CEP          String
  country      String
  state        String
  city         String
  street       String
  number       String
  district     String
  complement   String?

  orientador Orientador? @relation(fields: [orientadorId], references: [id])
  avaliador  Avaliador?  @relation(fields: [avaliadorId], references: [id])
}

model Orientador {
  id                     Int      @id @default(autoincrement())
  userId                 Int      @unique
  CPF                    String   @unique @default("000.000.000-00")
  birthDate              DateTime
  gender                 String
  ethnicity              String
  disability             String?
  needsAssistance        Boolean?
  shirtSize              String
  institutionName        String
  institutionType        String
  institutionalBond      String
  educationLevel         String
  course                 String
  knowledgeArea          String
  knowledgeSubArea       String
  projectMentorshipYears Int
  institutionalProofFile String
  address                Address?
  user                   User     @relation(fields: [userId], references: [id])
}

model Avaliador {
  id                     Int      @id @default(autoincrement())
  userId                 Int      @unique
  CPF                    String   @unique @default("000.000.000-00")
  birthDate              DateTime
  gender                 String
  ethnicity              String
  disability             String?
  needsAssistance        Boolean?
  shirtSize              String
  institutionName        String
  institutionType        String
  institutionalBond      String
  educationLevel         String
  course                 String
  knowledgeArea          String
  knowledgeSubArea       String
  institutionalProofFile String
  address                Address?
  evaluatedOtherFairs    Boolean
  otherFairsNames        String?
  wasOnlineEvaluator     Boolean
  onlineEvaluationYears  Int[]
  wasLiveEvaluator       Boolean
  liveEvaluationYears    Int[]
  agreedWithRegulation   Boolean

  user User @relation(fields: [userId], references: [id])
}

model Organizador {
  id         Int     @id @default(autoincrement())
  userId     Int     @unique
  board      String
  isAccepted Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id])

  solicitacaoCadastroOrganizador SolicitacaoCadastroOrganizador[]
}

model SolicitacaoCadastroOrganizador {
  id            Int         @id @default(autoincrement())
  organizadorId Int         @unique
  organizador   Organizador @relation(fields: [organizadorId], references: [id])
  justification String?
  situation     String?     @default("Pendente")
  date          DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
